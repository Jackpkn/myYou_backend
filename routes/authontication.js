const express = require("express");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
//initialize the authRouter
const authRouter = express.Router();
// initialize userModel

const createError = require("http-errors");
const auth = require("../middlewares/auth_middlewares");
const user_Schema = require("../models/user_auth_model");

const expressAsyncHandler = require("express-async-handler");
const User = require("../models/user_auth_model");
// require("dotenv").config();
//              ??????????????????????????????????????????????????!

//              ???????????????????????????????????????????????????

authRouter.post("/auth/signUp", async (req, res, next) => {
  try {
    const { name, email, password, phone } = req.body;

    const doesExist = await user_Schema.findOne({ email });
    if (doesExist) {
      return res
        .status(400)
        .json({ msg: "User with same email already exists!" });
      // throw createError.Conflict(`${email} is already been registered`);
    } // if(user.findOne({email}))
    const hashPassword = await bcrypt.hash(password, 8);

    let user = new user_Schema({
      name,
      email,
      phone,
      password: hashPassword,
    });
    user = await user.save();
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
    next(error);
  }
});

//              ??????????????????????????????????????????????????!

// ???????????????????????????????????????????

//              ???????????????????????????????????????????????????

authRouter.post("/auth/login", async (req, res, next) => {
  try {
    const { email, password } = req.body;

    const user = await user_Schema.findOne({ email });

    if (!user) {
      return res
        .status(400)
        .json({ msg: "User with this email does not exist" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ msg: "Incorrect password" });
    }

    const token = jwt.sign({ id: user._id }, "passwordKey");
    res.json({ token, ...user._doc });
  } catch (error) {
    res.status(500).json({ error: e.message });
  }
});

//              ??????????????????????????????????????????????????!

// ???????????????????????????????????????????

//              ???????????????????????????????????????????????????

authRouter.post("/tokenValid", async (req, res) => {
  try {
    const token = req.header("x-auth-token");
    if (!token) return res.json(false);
    const verified = jwt.verify(token, "passwordKey");
    if (!verified) return res.json(false);
    const user = await user_Schema.findById(verified.id);
    if (!user) return res.json(false);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
authRouter.get("/getUser", auth, async (req, res) => {
  const user = await user_Schema.findById(req.user);
  res.json({ ...this.use._doc, token: req.token });
});

//              ??????????????????????????????????????????????????!

// ???????????????????????????????????????????

//              ???????????????????????????????????????????????????

authRouter.post(
  "/auth/changePassword",
  auth,
  expressAsyncHandler(async (req, res) => {
    try {
      const user = await User.findById(req.user.id);
      if (await bcrypt.compare(req.body.currentPassword, user.password)) {
        User.updateOne(
          { _id: mongoose.Types.ObjectId(req.user.id) },
          {
            $set: {
              password: await bcrypt.hash(req.body.newPassword, 10),
            },
          }
        ).then(res.status(200).json({ msg: "Password changed successfully" }));
      } else {
        return res.status(401).json({ msg: "Password didn't match" });
      }
    } catch (error) {
      return res.status(400).json({ error: error.message });
    }
  })
);

module.exports = authRouter;
